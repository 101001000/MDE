/*
 * generated by Xtext 2.25.0
 */
package rest.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rest.services.RestGrammarAccess;
import restModel.Answer;
import restModel.Attachments;
import restModel.Field;
import restModel.FieldSet;
import restModel.OpCreate;
import restModel.OpDelete;
import restModel.OpRead;
import restModel.OpUpdate;
import restModel.Random;
import restModel.ReDelete;
import restModel.ReGet;
import restModel.RePost;
import restModel.RePut;
import restModel.RestModelPackage;
import restModel.RestSystem;
import restModel.Route;
import restModel.Segment;
import restModel.Struct;

@SuppressWarnings("all")
public class RestSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RestGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RestModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RestModelPackage.ANSWER:
				sequence_Answer(context, (Answer) semanticObject); 
				return; 
			case RestModelPackage.ATTACHMENTS:
				sequence_Attachments(context, (Attachments) semanticObject); 
				return; 
			case RestModelPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case RestModelPackage.FIELD_SET:
				sequence_FieldSet(context, (FieldSet) semanticObject); 
				return; 
			case RestModelPackage.OP_CREATE:
				sequence_OpCreate(context, (OpCreate) semanticObject); 
				return; 
			case RestModelPackage.OP_DELETE:
				sequence_OpDelete(context, (OpDelete) semanticObject); 
				return; 
			case RestModelPackage.OP_READ:
				sequence_OpRead(context, (OpRead) semanticObject); 
				return; 
			case RestModelPackage.OP_UPDATE:
				sequence_OpUpdate(context, (OpUpdate) semanticObject); 
				return; 
			case RestModelPackage.PARAMETER:
				sequence_Parameter(context, (restModel.Parameter) semanticObject); 
				return; 
			case RestModelPackage.RANDOM:
				sequence_Random(context, (Random) semanticObject); 
				return; 
			case RestModelPackage.RE_DELETE:
				sequence_ReDelete(context, (ReDelete) semanticObject); 
				return; 
			case RestModelPackage.RE_GET:
				sequence_ReGet(context, (ReGet) semanticObject); 
				return; 
			case RestModelPackage.RE_POST:
				sequence_RePost(context, (RePost) semanticObject); 
				return; 
			case RestModelPackage.RE_PUT:
				sequence_RePut(context, (RePut) semanticObject); 
				return; 
			case RestModelPackage.REST_SYSTEM:
				sequence_RestSystem(context, (RestSystem) semanticObject); 
				return; 
			case RestModelPackage.ROUTE:
				sequence_Route(context, (Route) semanticObject); 
				return; 
			case RestModelPackage.SEGMENT:
				sequence_Segment(context, (Segment) semanticObject); 
				return; 
			case RestModelPackage.STRUCT:
				sequence_Struct(context, (Struct) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Answer returns Answer
	 *
	 * Constraint:
	 *     (status=EInt? return=EString?)
	 */
	protected void sequence_Answer(ISerializationContext context, Answer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Data returns Attachments
	 *     Attachments returns Attachments
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Attachments(ISerializationContext context, Attachments semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestModelPackage.Literals.DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestModelPackage.Literals.DATA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttachmentsAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FieldSet returns FieldSet
	 *
	 * Constraint:
	 *     (name=EString expr=EString?)
	 */
	protected void sequence_FieldSet(ISerializationContext context, FieldSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestModelPackage.Literals.FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestModelPackage.Literals.FIELD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns OpCreate
	 *     OpCreate returns OpCreate
	 *
	 * Constraint:
	 *     (id=EString? failedAnswer=[Answer|EString] struct=[Struct|EString] (fieldset+=FieldSet fieldset+=FieldSet*)?)
	 */
	protected void sequence_OpCreate(ISerializationContext context, OpCreate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns OpDelete
	 *     OpDelete returns OpDelete
	 *
	 * Constraint:
	 *     (id=EString? failedAnswer=[Answer|EString] struct=[Struct|EString])
	 */
	protected void sequence_OpDelete(ISerializationContext context, OpDelete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns OpRead
	 *     OpRead returns OpRead
	 *
	 * Constraint:
	 *     (id=EString? failedAnswer=[Answer|EString] struct=[Struct|EString] (field+=Field field+=Field*)?)
	 */
	protected void sequence_OpRead(ISerializationContext context, OpRead semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns OpUpdate
	 *     OpUpdate returns OpUpdate
	 *
	 * Constraint:
	 *     (id=EString? failedAnswer=[Answer|EString] struct=[Struct|EString] (fieldset+=FieldSet fieldset+=FieldSet*)?)
	 */
	protected void sequence_OpUpdate(ISerializationContext context, OpUpdate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Data returns Parameter
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Parameter(ISerializationContext context, restModel.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestModelPackage.Literals.DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestModelPackage.Literals.DATA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Data returns Random
	 *     Random returns Random
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Random(ISerializationContext context, Random semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RestModelPackage.Literals.DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RestModelPackage.Literals.DATA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRandomAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Request returns ReDelete
	 *     ReDelete returns ReDelete
	 *
	 * Constraint:
	 *     ((ops+=[Operation|EString] ops+=[Operation|EString]*)? succAnswer=[Answer|EString] route=Route (data+=Data data+=Data*)?)
	 */
	protected void sequence_ReDelete(ISerializationContext context, ReDelete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Request returns ReGet
	 *     ReGet returns ReGet
	 *
	 * Constraint:
	 *     ((ops+=[Operation|EString] ops+=[Operation|EString]*)? succAnswer=[Answer|EString] route=Route (data+=Data data+=Data*)?)
	 */
	protected void sequence_ReGet(ISerializationContext context, ReGet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Request returns RePost
	 *     RePost returns RePost
	 *
	 * Constraint:
	 *     ((ops+=[Operation|EString] ops+=[Operation|EString]*)? succAnswer=[Answer|EString] route=Route (data+=Data data+=Data*)?)
	 */
	protected void sequence_RePost(ISerializationContext context, RePost semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Request returns RePut
	 *     RePut returns RePut
	 *
	 * Constraint:
	 *     ((ops+=[Operation|EString] ops+=[Operation|EString]*)? succAnswer=[Answer|EString] route=Route (data+=Data data+=Data*)?)
	 */
	protected void sequence_RePut(ISerializationContext context, RePut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RestSystem returns RestSystem
	 *
	 * Constraint:
	 *     (
	 *         (request+=Request request+=Request*)? 
	 *         (struct+=Struct struct+=Struct*)? 
	 *         (operation+=Operation operation+=Operation*)? 
	 *         (answer+=Answer answer+=Answer*)?
	 *     )
	 */
	protected void sequence_RestSystem(ISerializationContext context, RestSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Route returns Route
	 *
	 * Constraint:
	 *     (segment+=Segment segment+=Segment*)
	 */
	protected void sequence_Route(ISerializationContext context, Route semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Segment returns Segment
	 *
	 * Constraint:
	 *     value=EString?
	 */
	protected void sequence_Segment(ISerializationContext context, Segment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Struct returns Struct
	 *
	 * Constraint:
	 *     fields=EString?
	 */
	protected void sequence_Struct(ISerializationContext context, Struct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
