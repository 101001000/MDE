/**
 * generated by Xtext 2.25.0
 */
package rest.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import rest.services.RestGrammarAccess;
import restModel.Answer;
import restModel.Field;
import restModel.Request;
import restModel.RestSystem;
import restModel.Struct;

@SuppressWarnings("all")
public class RestFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RestGrammarAccess _restGrammarAccess;
  
  protected void _format(final RestSystem restSystem, @Extension final IFormattableDocument document) {
    EList<Request> _requests = restSystem.getRequests();
    for (final Request request : _requests) {
      document.<Request>format(request);
    }
    EList<Struct> _structs = restSystem.getStructs();
    for (final Struct struct : _structs) {
      document.<Struct>format(struct);
    }
    EList<Answer> _answers = restSystem.getAnswers();
    for (final Answer answer : _answers) {
      document.<Answer>format(answer);
    }
  }
  
  protected void _format(final Struct struct, @Extension final IFormattableDocument document) {
    EList<Field> _fields = struct.getFields();
    for (final Field field : _fields) {
      document.<Field>format(field);
    }
  }
  
  public void format(final Object restSystem, final IFormattableDocument document) {
    if (restSystem instanceof XtextResource) {
      _format((XtextResource)restSystem, document);
      return;
    } else if (restSystem instanceof RestSystem) {
      _format((RestSystem)restSystem, document);
      return;
    } else if (restSystem instanceof Struct) {
      _format((Struct)restSystem, document);
      return;
    } else if (restSystem instanceof EObject) {
      _format((EObject)restSystem, document);
      return;
    } else if (restSystem == null) {
      _format((Void)null, document);
      return;
    } else if (restSystem != null) {
      _format(restSystem, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(restSystem, document).toString());
    }
  }
}
